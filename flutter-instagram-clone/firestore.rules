rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function isFollowing(followerId, followingId) {
      return exists(/databases/$(database)/documents/follows/$(followerId + '_' + followingId));
    }

    // Stories collection: Public read, create by authenticated users, update/delete by story owner
    match /stories/{storyId} {
      allow read: if true;
      allow create: if isAuthenticated()
        && request.resource.data.userId == request.auth.uid
        && request.resource.data.mediaUrl is string
        && request.resource.data.timestamp is timestamp
        && request.resource.data.expiresAt is timestamp;
      allow update, delete: if isAuthenticated()
        && request.auth.uid == resource.data.userId;
    }

    // Users collection: Public read, write only by the user
    match /users/{userId} {
      allow read: if true;
      allow write: if isAuthenticated() && isOwner(userId);
    }

    // Posts collection: Public read, create by authenticated users, update/delete by post owner
    match /posts/{postId} {
      allow read: if true;
      allow create: if isAuthenticated() 
        && request.resource.data.userId == request.auth.uid;
      allow update: if isAuthenticated() && (
        isOwner(resource.data.userId) || 
        request.resource.data.diff(resource.data).affectedKeys()
          .hasOnly(['likes', 'comments'])
      );
      allow delete: if isAuthenticated() && isOwner(resource.data.userId);
    }

    // Follows collection
    match /follows/{followId} {
      allow read: if true;
      allow create: if isAuthenticated() 
        && request.resource.data.followerId == request.auth.uid;
      allow delete: if isAuthenticated() 
        && resource.data.followerId == request.auth.uid;
    }

    // Chats collection: Access restricted to members
    match /chats/{chatId} {
      allow read: if isAuthenticated() 
        && request.auth.uid in resource.data.members;

      allow create: if isAuthenticated() 
        && request.auth.uid in request.resource.data.members;

      allow update: if isAuthenticated() 
        && request.auth.uid in resource.data.members;

      allow delete: if isAuthenticated() 
        && request.auth.uid in resource.data.members;

      // Messages subcollection: Access restricted to chat members
      match /messages/{messageId} {
        allow read: if isAuthenticated() 
          && request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.members;

        allow create: if isAuthenticated() 
          && request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.members
          && request.resource.data.senderId == request.auth.uid;

        allow update: if isAuthenticated() 
          && request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.members;

        allow delete: if isAuthenticated() 
          && request.auth.uid == resource.data.senderId
          && request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.members;
      }
    }
  }
} 